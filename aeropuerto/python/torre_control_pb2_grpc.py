# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import torre_control_pb2 as torre__control__pb2


class ControlStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SayHello = channel.unary_unary(
        '/torreDeControl.Control/SayHello',
        request_serializer=torre__control__pb2.HelloRequest.SerializeToString,
        response_deserializer=torre__control__pb2.HelloReply.FromString,
        )
    self.NuevoAvion = channel.unary_unary(
        '/torreDeControl.Control/NuevoAvion',
        request_serializer=torre__control__pb2.AterrizajeRequest.SerializeToString,
        response_deserializer=torre__control__pb2.AterrizajeReply.FromString,
        )


class ControlServicer(object):
  """The greeting service definition.
  """

  def SayHello(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NuevoAvion(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ControlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SayHello': grpc.unary_unary_rpc_method_handler(
          servicer.SayHello,
          request_deserializer=torre__control__pb2.HelloRequest.FromString,
          response_serializer=torre__control__pb2.HelloReply.SerializeToString,
      ),
      'NuevoAvion': grpc.unary_unary_rpc_method_handler(
          servicer.NuevoAvion,
          request_deserializer=torre__control__pb2.AterrizajeRequest.FromString,
          response_serializer=torre__control__pb2.AterrizajeReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'torreDeControl.Control', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
